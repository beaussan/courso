query getUserByEmail($email: String!) {
  user(where: { email: { _eq: $email } }) {
    ...UserForAuth
  }
}

mutation createVerificationRequest(
  $config: verification_requests_insert_input!
) {
  insert_verification_requests_one(
    object: $config
    on_conflict: { constraint: verification_requests_pkey, update_columns: [] }
  ) {
    id
  }
}

query getUserByProviderAccountId(
  $providerId: String!
  $providerAccountId: String!
) {
  accounts(
    where: {
      provider_id: { _eq: $providerId }
      _and: { provider_account_id: { _eq: $providerAccountId } }
    }
  ) {
    user {
      ...UserForAuth
    }
  }
}

query getVerificationRequestByIdentifierAndToken(
  $identifier: String!
  $token: String!
) {
  verification_requests(
    limit: 1
    where: {
      identifier: { _eq: $identifier }
      _and: { token: { _eq: $token } }
    }
  ) {
    expires
    created_at
    updated_at
    id
    identifier
    token
  }
}

mutation deleteVerificationRequestByIdentifierAndToken(
  $identifier: String!
  $token: String!
) {
  delete_verification_requests(
    where: {
      identifier: { _eq: $identifier }
      _and: { token: { _eq: $token } }
    }
  ) {
    affected_rows
  }
}

query getUserById($id: uuid!) {
  userByPk(id: $id) {
    ...UserForAuth
  }
}

fragment UserForAuth on user {
  id
  email
  email_verified
  image
  createdAt
  updatedAt
  name
  default_role
  allowed_roles {
    role
  }
}

mutation createUserByEmail(
  $email: String!
  $verified: timestamptz
  $name: String
  $image: String
) {
  insertUserOne(
    on_conflict: {
      constraint: user_email_key
      update_columns: [email_verified]
    }
    object: {
      email_verified: $verified
      email: $email
      name: $name
      image: $image
      default_role: student
      allowed_roles: {
        data: [{ role: student }]
        on_conflict: { update_columns: [], constraint: allowed_roles_pkey }
      }
    }
  ) {
    ...UserForAuth
  }
}

mutation linkAccount($object: accounts_insert_input!) {
  insert_accounts_one(
    object: $object
    on_conflict: { constraint: accounts_compound_id_key, update_columns: [] }
  ) {
    id
  }
}

mutation setTimeEmailVerified($userId: uuid!, $time: timestamptz) {
  updateUserByPk(pk_columns: { id: $userId }, _set: { email_verified: $time }) {
    ...UserForAuth
  }
}

mutation deleteUserById($id: uuid!) {
  deleteUserByPk(id: $id) {
    id
  }
}

query findUserByEmail($email: String!) {
  maybeUser: user(where: { email: { _eq: $email } }) {
    id
  }
}
